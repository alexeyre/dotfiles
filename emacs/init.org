Loads secrets
#+begin_src emacs-lisp
  (load-file (expand-file-name "secrets.el" user-emacs-directory))
#+end_src

Collect ~$PATH~ from my local shell, to ensure ~brew~ and ~nix~
compatibility mainly.
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))
#+end_src

Installs the dashboard, sets up the floating GNU logo and uses counsel
commands for projectile.
#+begin_src emacs-lisp
  (use-package page-break-lines)
  (use-package all-the-icons)
  (use-package dashboard
    :config
    (setq dashboard-startup-banner (expand-file-name "logo.png" user-emacs-directory)
	  dashboard-items '((agenda . 5)
			    (recents  . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (registers . 5))
	  dashboard-show-navigator t
	  dashboard-set-init-info t
	  dashboard-center-content t
	  dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name
	  )
    (dashboard-setup-startup-hook))
#+end_src
 - remove unnecessary UI
 - set up fonts
 - hook dvp in input modes
#+begin_src emacs-lisp
  (use-package programmer-dvorak)
  (use-package emacs
    :bind
    ("C-c e" . eshell)
    :config
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (add-to-list 'default-frame-alist '(font . "MonoLisa 14"))
    (global-auto-revert-mode t)
    :hook
    (minibuffer-setup . (lambda () (set-input-method "programmer-dvorak")))
    (char-mode . (lambda () (set-input-method "programmer-dvorak")))
    (line-mode . (lambda () (set-input-method "programmer-dvorak")))
    :custom
    (vc-follow-symlinks t)
    (enable-recursive-minibuffers t))
#+end_src

- setup evil and extensions
- ace window for fast window switching
- which key so I can remember binds
#+begin_src emacs-lisp
  (use-package which-key
    :init(which-key-mode))

  (use-package evil-anzu
    :after evil
    :init(anzu-mode))

  (use-package evil
    :hook
    (evil-insert-state-entry . (lambda () (set-input-method "programmer-dvorak")))
    (evil-replace-state-entry . (lambda () (set-input-method "programmer-dvorak")))
    (isearch-mode . (lambda () (set-input-method "programmer-dvorak")))
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom (evil-collection-setup-minibuffer t)
    :init (evil-collection-init))

  (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?q ?w ?e ?r))
    (ace-window-posframe-mode)
    :bind("C-a" . ace-window))
#+end_src

- ivy/counsel/swiper because it's infinitely better than the default
- company for popups in code
- doom themes for my eyes
#+begin_src emacs-lisp

  (use-package ivy-posframe
    :custom(ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
    :config(ivy-posframe-mode))

  (use-package counsel
    :config(counsel-mode)
    :bind
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable)
    ("C-c p" . counsel-fzf)
    ("C-c c p" . (lambda () (interactive) (counsel-fzf "" "~")))
    ("C-x b" . counsel-switch-buffer))

  (use-package company
    :bind (:map prog-mode-map
	   ("C-i" . company-indent-or-complete-common)
	   ("C-M-i" . counsel-company))
    :hook prog-mode)

  (use-package doom-themes
    :bind
    ("C-c t l" . 'light)
    ("C-c t d" . 'dark)
    :config
    (defun light ()
      (interactive)
      (progn
	(disable-theme 'doom-one)
	(enable-theme 'doom-one-light)
	))
    (provide 'light)
    (defun dark ()
      (interactive)
      (progn
	(disable-theme 'doom-one-light)
	(enable-theme 'doom-one)
	))
    (provide 'dark)
    (doom-themes-org-config)
    (load-theme 'doom-one-light t)
    (load-theme 'doom-one t)
    (dark))

  (use-package doom-modeline
    :custom
    (doom-modeline-time t)
    :init(display-battery-mode)
    :hook(after-init . doom-modeline-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package markdown-mode+
    :mode ("\\.md\\'" . markdown-mode+))
#+end_src

#+begin_src emacs-lisp
    (use-package pdf-tools
    :config
  (setq pdf-view-use-scaling t)
  (pdf-tools-install))
#+end_src

#+begin_src emacs-lisp

  (defun my/text-scale-adjust-latex-previews ()
    "Adjust the size of latex preview fragments when changing the
  buffer's text scale."
    (pcase major-mode
      ('latex-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
	 (if (eq (overlay-get ov 'category)
		 'preview-overlay)
	     (my/text-scale--resize-fragment ov))))
      ('org-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
	 (if (eq (overlay-get ov 'org-overlay-type)
		 'org-latex-overlay)
	     (my/text-scale--resize-fragment ov))))))

  (defun my/text-scale--resize-fragment (ov)
    (overlay-put
     ov 'display
     (cons 'image
	   (plist-put
	    (cdr (overlay-get ov 'display))
	    :scale (+ 1.0 (* 0.25 text-scale-mode-amount))))))

  (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)
#+end_src

#+begin_src emacs-lisp
  (use-package cdlatex
    :hook
    (org-mode . turn-on-org-cdlatex))

  (use-package org
    :straight nil
    :bind("C-c c" . org-capture)
    :custom
    (org-preview-latex-image-directory "~/.local/cache/org-previews/")
    (org-default-notes-file "~/Documents/knowledge/main.org")
    (org-capture-templates '(
			     ("n" "Note" entry (file+datetree "~/Documents/knowledge/main.org" "Fleeting notes") "* %?\n%i\n")
			     ))
    :config
    (setq org-latex-create-formula-image-program 'dvisvgm)
    (setq org-agenda-files '("~/Documents/knowledge/main.org"))
    (require 'org-tempo)
    :hook
    (org-mode . auto-fill-mode)
    (org-mode . visual-line-mode)
    (org-mode . (lambda ()
		  (interactive)
		  (setq buffer-face-mode-face '(:family "Space Mono"))
		  (buffer-face-mode))))
  (use-package org-fragtog
    :hook org-mode)
  (use-package centered-cursor-mode
    :commands centered-cursor-mode)
  (use-package olivetti
    :commands olivetti-mode)
  (bind-key "C-l" #'(lambda () ""
		      (interactive)
		      (find-file "~/Documents/knowledge/main.org")
		      (counsel-org-goto)))
#+end_src
#+begin_src emacs-lisp
    (use-package org-auctex
  :straight(:type git :host github :repo "karthink/org-auctex")
    :config
    (defalias #'org-latex-preview #'org-auctex-preview-dwim)
    (defalias #'org-clear-latex-preview #'math-preview-clearout-at-point))
#+end_src

#+begin_src emacs-lisp
  (use-package org-noter
  :commands(org-noter)
  :bind(:map pdf-view-mode-map
	     ("i" . org-noter-insert-note)))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp :tangle no
  (use-package math-preview
    :disabled t
    :config
    (defalias #'org-latex-preview #'math-preview-at-point)
    (defalias #'org-clear-latex-preview #'math-preview-clear-region))
#+end_src

#+begin_src emacs-lisp
  (use-package counsel-spotify
  :requires ivy)
#+end_src

#+begin_src emacs-lisp

  (use-package magit)
  (use-package counsel-projectile
    :config(counsel-projectile-mode))
  (use-package projectile
    :bind(:map projectile-mode-map
	       ("C-c C-p" . 'projectile-command-map))
    :custom
    (projectile-project-search-path (cddr (directory-files "~/Projects" t)))
    (projectile-completion-system 'ivy)
    :init(projectile-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package twittering-mode
    :bind("C-c t t" . twit))
#+end_src
